server:
  port: 0

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: ${EUREKA_URI:http://localhost:8080/eureka}
  instance:
    appname: consumer
    instance-id: consumer-${random.value}

kafka-consumer:
  instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  consumer:
    container-factory:
      concurrency: 20
      properties:
        pool-timeout: 30000

spring:
  application:
    name: consumer

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/kafkaBalancedConsumer
    username: user
    password: password
    initialization-mode: always
  
  jpa:
    hibernate:
      ddl-auto: update
      dialect: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect   
    
  kafka:
    consumer:
      bootstrap-servers: kafka-1:19092,kafka-2:29092,kafka-3:39092
      group-id: consumerGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      properties:
        interceptor:
          classes: com.github.ricardocomar.kafkabalancedconsumers.kafkaconsumer.config.KafkaMessageInterceptor
      bootstrap-servers: kafka-1:19092,kafka-2:29092,kafka-3:39092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer